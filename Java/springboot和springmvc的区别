  springmvc从两个方面来看，一是spring,spring的核心中IOC和AOP,IOC就是控制反转(就是将原本由程序代码直接操作的对象的调用权交给容器)，目的是为了减低计算机代码的耦合度，所谓的耦合度就是代码中的逻辑关系不要太紧密，避免后面改的人会因为不懂业务逻辑导致改错代码；除此之外也避免我们每次创建新的对象，减少对应的代码量。我们实际代码过程中最常见的方式是依赖注入（DI Dependency Injection）,所谓依赖注入就是通过构造注入或者set进行注入。依赖查找（DL Dependency Lookup)这是通过名称和类型查找bean。AOP是面向切面编程，AOP分为五大部分：（1）Aspect(切面):通常是一个类，里面可以定义切入点和通知。（2）JointPoint（连接点）：程序执行中明确的点，一般是方法的调用。(3)Advice(通知）：AOP在特定的切入点上做出的增强处理，有before,after,afterRunning,afterThrowing,around;（4）Pointcut(切入点）：就是带有通知的连接点，在程序中主要体现为书写切入点表达式；(5)AOP代理：AOP框架创建的对象，代理就是目标对象的加强，Spring的AOP可以使用JDK代理，也可以使用CGLIB代理，前者基于接口，后者是基于子类。

通知类型：

(1)Before:在目标方法被调用之前做增强处理,@Before只需要指定切入点表达式即可

(2)AfterReturning:在目标方法正常完成后做增强,@AfterReturning除了指定切入点表达式后，还可以指定一个返回值形参名returning,代表目标方法的返回值

(3)AfterThrowing:主要用来处理程序中未处理的异常,@AfterThrowing除了指定切入点表达式后，还可以指定一个throwing的返回值形参名,可以通过该形参名

来访问目标方法中所抛出的异常对象

(4)After:在目标方法完成之后做增强，无论目标方法时候成功完成。@After可以指定一个切入点表达式

(5)Around:环绕通知,在目标方法完成前后做增强处理,环绕通知是最重要的通知类型,像事务,日志等都是环绕通知,注意编程中核心是一个ProceedingJoinPoint

        springboot引入自动配置的概念，让项目配置变得更容易，Spring Boot本身并不提供Spring框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于Spring框架的应用程序。也就是说，它并不是用来替代Spring的解决方案，而是和Spring框架紧密结合用于提升Spring开发者体验的工具。同时它集成了大量常用的第三方库配置(例如Jackson, JDBC, Mongo, Redis, Mail等等)，Spring Boot应用中这些第三方库几乎可以零配置的开箱即用(out-of-the-box)，大部分的SpringBoot应用都只需要非常少量的配置代码，开发者能够更加专注于业务逻辑。Spring Boot只是承载者，辅助开发者简化项目搭建过程的。如果承载的是WEB项目，使用Spring MVC作为MVC框架，那么工作流程和SpringMVC的是完全一样的，因为这部分工作是Spring MVC做的而不是Spring Boot。

        springmvc与springboot的联系和区别：

        联系：

         Spring最初利用工厂模式（DI)和代理模式解耦应用组件，为了解耦开发了springmvc；而实际开发过程中，经常会使用到注解，程序的样板很多，于是开发了starter，这套就是springboot。

        区别：

       1.springboot是约定大于配置，可以简化spring的配置流程；springmvc是基于servlet的mvc框架，个人感觉少了model中的映射。

       2.以前web应用要使用到tomat服务器启动，而springboot内置服务器容器，通过@SpringBootApplication中注解类中main函数启动即可。
